Write a power function such that (power m n) returns m raised to the power n, where n is non-negative integer.

(define (pow m n) (
    if (= n 0)
        1
    ;else
        (* (pow m (- n 1)) m)
))

2^3
(pow 2 3)
    2 * (pow 2 2)
        2 * pow(2 1)
            2 * pow(2 0)
                1

###########################

Write a log function such that (log m q) returns n such that (power m n) returns q.

(log 2 8) = 3
(pow 2 3) = 8
log base 2 of 8 is 3

(define (log m q) (
    if (= (/ q m) 1)
        1
    ;else
        (+ 1 (log m (/ q m)))
))

divide by 2 until you get 1

#############################

Write a comb function such that (comb n k) returns the number of combinations n-choose-k.

(define (comb n k) (
    if (or (or (= k 0) (= k n)) (= n 0))
        1
    ;else
        (+ (comb (- n 1) (- k 1)) (comb (- n 1) k))
))

n choose n is always 1
n choose 0 is always 1
0 choose n is always 1

4,3
    3,2              3,3
        2,1     2,2   1
      1,0 1,1    1
       1   1
#######################

Write an insertion_sort function such that (insertion_sort L) returns the elements of L rearranged into ascending order.

(define (insert x L) (
    (if (null? L) (list x)) ;empty list
        (if (< x (car L)) (cons x L)
            (cons (car L) (insert x (cdr L)))
        )
))

(define (insertion_sort1 L) (
    if (null? L) '()
        (insert (car L) (insertion_sort (cdr L)))
))

(define (insertion_sort2 L) (
    (fold-right insert '() L)
))

#########################

Write a selection_sort function.

(define (selection_sort L) (
    cond ((null? L) '())
    (else (cons (min (car L) L) (selection_sort (del (min (car L) L) L))))
))

(define (min x L) (
    cond ((null? L) x)
    ((< (car L) x) (min (car L) (cdr L)))
    (else (min x (cdr L)))
))

(define (del x L) (
    cond ((null? L) '())
    ((= x (car L)) (cdr L))
    (else (cons (car L) (del x (cdr L))))
))

#######################

Write a merge_sort function.

Write a quick_sort function.

Write function (member? x T) that returns true (#t) if x is a key in binary search tree T, and otherwise returns false (#f).

Write function (insert x T) that inserts key x into binary search tree T, and returns the resulting modified tree.

Write function (remove x T) that removes key x from binary search tree T, and returns the resulting modified tree.

Write functions (inorder T) and (preorder T) and (postorder T) for binary search tree T.

Write a filter function such that (filter P L) returns the elements in list L for which predicate P yields #t.  Example: (filter (lambda (x) (> x 0)) '(1 -2 3 -4 5 0 8 9)) returns (1 3 5 8 9).

Write a reject function such that (reject P L) returns the elements in list L for which predicate P yields #f.  Example: (reject (lambda (x) (> x 0)) '(1 -2 3 -4 5 0 8 9)) returns (-2 -4 0).

#########################

Write an applyeach function such that (applyeach L1 L2) applies each function in list L1 to the corresponding value in list L2.  Example: (applyeach (list car cdr length null? last) '((1 2) (4 5 6 7) (8 9 10) (11 12) (13 14))) returns (1 (5 6 7) 3 #f 14).

(define (applyeach L1 L2) (
    cond ((null? L1) L2)
        ((null? L2) '())
        (else cons ((car L1) (car L2)) (applyeach (cdr L1) (cdr L2)))
))

############################

Write function (forall P L) which returns #t iff all values in L satisfy predicate P.  Also write function (exists P L) which returns #t iff some value in L satisfies predicate P.

Which of the above functions can you implement using recursion?  Which functions can you implement without recursion by using map, foldl, and/or foldr?