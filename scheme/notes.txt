;;;;;;;;;;;;;;;;;

;function to find the greatest of three numbers

(define (max3 x y z)
    (cond
        ((and (>= x y) (>= x z)) x)
        ((and (>= y x) (>= y z)) y)
        ((and (>= z x) (>= z y)) z)
        (else 'error)
    )
)

;;;;;;;;;;;;;;;;;;;

;lists

(define list1 '(1 2 3 4))

;list operations

(length list1)
(null? '())
(append list1 '(5))
(cons 'a list1)
(list-ref list1 2)

;;;;;;;;;;;;;;;;;;;

;length implementation

(define (_length L)
    (cond
        ((null? L) 0)
        (else (+ 1 (_length (cdr L))))
    )
)
(_length '(1 2 3 4))

;;;;;;;;;;;;;;;

;append implementation

(define (_append L1 L2)
    (cond
        ((null? L1) L2)
        (else (cons (car L1) (_append (cdr L1) L2)))
    )
)
(_append '(a b c) '(d . ()))

;ways to append a value to a list

(append '(a b c) (cons 'd '()))
(append '(a b c) '(d . ()))
(append '(a b c) (list 'd))
(fold-right cons (list 'd) '(a b c))

;;;;;;;;;;;;;;;;;;

;reverse implementation

(define (_reverse L)
    (cond
        ((null? L) '())
        (else (append (_reverse (cdr L)) (list (car L))))
    )
)
(_reverse '(1 2 3 4))

;;;;;;;;;;;;;;;

;count the ocurrence of an element in a list

(define (count x L)
    (cond
        ((null? L) 0)
        (else (+ (if (= x (car L)) 1 0) (count x (cdr L))))
    )
)
(count 1 '(1 2 3 1 2 1))

;;;;;;;;;;;;;;;;;;

;cond expression as opposed to if

(define (_negative? x) (
    cond(
        (< x 0) 'yes)
        ((> x 0) 'no)
        (else 'neither)
    )
)

;;;;;;;;;;;;;;;;;;;

;pairs

(cons 'a 'b)
'(a . (b . (c . ())))
'(((() . c) . b) . a)

;;;;;;;;;;;;;;;;;;;

;count function using cond and symbolic equality

(define (count x L) (
    cond(
        (null? L) 0)
        ((eq? (car L) x) (+ 1 (count x (cdr L))))
        (else (count x (cdr L)))
    )
)

;;;;;;;;;;;;;;;;;;;;

;recursively count

(define (countall x L)
    (cond
        ((null? L) 0)
        ((pair? L) (+ (countall x (car L)) (countall x (cdr L))))
        ((eq? x L) 1)
        (else 0)
    )
)
(countall 'a '(a (a))) ;gives 0?

;;;;;;;;;;;;;;;;;;;;

;equal? recursive

(define (_equal? L1 L2)
    (cond
        ((and (pair? L1) (pair? L2)) (and (_equal? (car L1) (car L2)) (_equal? (cdr L1) (cdr L2))))
        (else (eq? L1 L2))
    )
)
(_equal? '(1 2 3) '(1 2 3))

;;;;;;;;;;;;;;;;;;;;;;;

;flatten

(define (flatten L)
    (cond
        ((null? L) '())
        ((pair? L) (append (flatten (car L)) (flatten (cdr L))))
        (else (list L))
    )
)
(flatten '(1 2 3 (4 5 6) (2) ()))

;;;;;;;;;;;;;;;;;;;;

;map

(map square '(1 2 3 4))

;map implementation

(define (mapp fn L)
    (cond
        ((null? L) '())
        (else (cons (fn (car L)) (mapp fn (cdr L))))
    )
)
(mapp square '(1 2 3 4)) ;(1 4 9 16)

;first element of each sub list

(map car '((a b c) (1 2 3) (z x c)))

;;;;;;;;;;;;;;;;;;;;

;filter

(filter positive? '(1 -1 2 -2 3))

;filter implementation

(define (_filter p L)
    (cond
        ((null? L) '())
        ((not (p (car L))) (_filter p (cdr L)))
        (else (cons (car L) (_filter p (cdr L))))
    )
)
(_filter positive? '(1 -2 3 -4))

;;;;;;;;;;;;;;;;;

;reject implementation

(define (reject p L)
    (cond
        ((null? L) '())
        ((p (car L)) (reject p (cdr L)))
        (else (cons (car L) (reject p (cdr L))))
    )
)
(reject positive? '(1 -2 3 -4))

;;;;;;;;;;;;;;;;;

;fold

(fold-left + 0 '(1 2 3 4))
(fold-left * 1 '(1 2 3 4))
(fold-left append '() '((10 20) (a b c) (4 5)))

(define (foldl f id L) (
    if (null? L) id
        (foldl f (f id (car L)) (cdr L)) 
))
(foldl + 0 '(1 2 3 4))

(define (foldr f id L) (
    if (null? L) id
        (f (car L) (foldr f id (cdr L)))
))
(foldr - 0 '(1 2 3 4)) ;equals ((((4-0)-3)-2)-1)

(fold-left cons '() '(1 2 3 4))
(fold-right cons '() '(1 2 3 4))

;;;;;;;;;;;;;;;;;;;;;;

;zip

(zip '(1 2 3) '(1 2 3))
(define (z L1 L2) (
    if (or (null? L1) (null? L2)) '()
        (cons (list (car L1) (car L2)) (z (cdr L1) (cdr L2)))
))
(z '(1 2 3) '(1 2 3))

;zipwith

(define (zipwith f L1 L2) (
    if (or (null? L1) (null? L2)) '()
        (cons (f (car L1) (car L2)) (zipwith f (cdr L1) (cdr L2)))
))
(zipwith + '(1 2 3) '(1 2 3))

;;;;;;;;;;;;;;;;;;;;

;anonymous functions (lambda)

(define g (lambda (x) (+ x 3)))
(g 5)

((lambda (x) (+ x 3)) 5)

(map (lambda (x) (+ x 3)) '(1 2 3))

;;;;;;;;;;;;;;;;;;

;cons using lambda  (3 implementations)

(define mycons (lambda (x) (lambda (y) (cons x y))))
(cons 1 2)
((mycons 1) 2)

(define ((mycons2 x) y) (cons x y))
((mycons2 1) 2)

(define (mycons3 x) (lambda (y) (cons x y)))
((mycons3 1) 2)

(map (mycons 5) '(1 2 3 4))

;;;;;;;;;;;;;;;;;;;;;;;

;fold using lambda

(fold-left (lambda (x y) (cons y x)) '() '(1 2 3 4))
(fold-left (lambda (x y) (append (list y) x)) '() '(1 2 3 4))
(fold-right (lambda (x y) (append y (list x))) '() '(1 2 3 4))

(fold-left (lambda (x y) (append x (list y))) '() '(1 2 3 4))
(fold-right (lambda (x y) (cons x y)) '() '(1 2 3 4))
(fold-right (lambda (x y) (append (list x) y)) '() '(1 2 3 4))

(fold-right (lambda (x y) (append (list (square x)) y)) '() '(1 2 3 4))
(fold-left (lambda (x y) (append x (list (square y)))) '() '(1 2 3 4))
;;;;;;;;;;;;;;;;;;;;;;;;;

;trees

;       a
; |       \       \
; b       c        d
; |\      |        |
; e f     g      h j k
;         |\       |
;         m n      p

;(root subtree1, subtree2, ...)

(define tree1 '(a (b(e)(f)) (c (g(m)(n))) (d (h)(j(p))(k))))

;post order

;(efb) (mngc) (hpjkd) (a)

(define (postorder T) (
    if (null? T) '()
        (fold-right append (list (car T)) (map postorder (cdr T)))
))
(postorder tree1)

;;;;;;;;;;;;;;;;;;;;;

;fibonacci

(define (fib1 n) (
    if (< n 2) n
        (+ (fib1 (- n 1)) (fib1 (- n 2)))
))

(define (help n a b) (
    if (= n 0) a
        (help (- n 1) b (+ a b))
))

(define (fib2 n) (
    (help n 0 1)
))

(define (help2 n) (
    if (= n 0) '(0 . 1)
        (let ((p (help2 (- n 1))))
            (cons (cdr p) (+ (car p) (cdr p)))
        )
))

(define (fib3 n) (
    (car (help2 n))
))

;;;;;;;;;;;;;;;;;;;;;;;

;using let

(let ((a 2)(b 3)(c 4)) (+ (square a) (square b) (square c)))

(define a 2)
(define b 3)

;let uses global scope

(let ((c (+ a 5))(a (+ b 10))(b (* c a))) (list a b c))

;let* uses local scope if overwritten

(let* ((c (+ a 5))(a (+ b 10))(b (* c a))) (list a b c))

(let ((a b)(b a)) (cons a b))
(let* ((a b)(b a)) (cons a b))

(define (f a) (+ a 1))

(let ((f (lambda (a) (* 2 a)))
        (g (lambda (a) (f (square a))))) 
            (g 5)
)

;letrec

(letrec ((f (lambda (n) (if (= n 0) 1 (* n (f (- n 1))))))) (f 5))
(let ((f (lambda (n) (if (= n 0) 1 (* n (f (- n 1))))))) (f 5))

;cond

(define (f n)
    (if (number? n) (square n)
        (if (null? n) '()
            (if (pair? n) (car n)
                (if (procedure? n) (n 7)
                    (if (boolean? n) (not n)
                        n)
                )
            )
        )
    )
)    

(define (f n)
    (cond ((number? n) (square n))
        ((null? n) '())
        ((pair? n) (car n))
        (#t n)
    )
)




